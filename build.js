// Generated by Haxe 3.4.7
(function () { "use strict";
var App = function() {
	this.warriorStock = [];
	this.display = new Display(20,10);
	this.warriorStock = Warrior.createWarriors(this.display);
};
App.prototype = {
	drawWarrior: function(w) {
		this.display.setPixel(w.position,w.name.charAt(0));
		return w;
	}
	,update: function() {
		this.display.clear();
		var _g = 0;
		var _g1 = this.warriorStock;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			e.position.x += Math.random() - 0.5;
			e.position.y += Math.random() - 0.5;
			if(e.position.x > this.display.width) {
				e.position.x = this.display.width;
			} else if(e.position.x < 0) {
				e.position.x = 0;
			} else if(e.position.y > this.display.height) {
				e.position.y = this.display.height;
			} else if(e.position.y < 0) {
				e.position.y = 0;
			}
			var _g2 = 0;
			var _g3 = this.warriorStock;
			while(_g2 < _g3.length) {
				var e2 = _g3[_g2];
				++_g2;
				if(e != e2) {
					if(e.position == e2.position) {
						e.attack(e2);
						console.log(e.health);
					} else if(e.health <= 0) {
						HxOverrides.remove(this.warriorStock,e);
					}
				}
			}
			this.drawWarrior(e);
		}
		this.display.draw();
	}
};
var Display = function(width,height) {
	this.width = width;
	this.height = height;
	this.clear();
};
Display.prototype = {
	clear: function() {
		var total = this.width * this.height;
		this.pixels = [];
		var _g1 = 0;
		var _g = total;
		while(_g1 < _g) {
			var i = _g1++;
			this.pixels.push(".");
		}
	}
	,draw: function() {
		var string = "";
		var _g1 = 0;
		var _g = this.height;
		while(_g1 < _g) {
			var y = _g1++;
			var _g3 = 0;
			var _g2 = this.width;
			while(_g3 < _g2) {
				var x = _g3++;
				var v = this.pixels[y * this.width + x];
				string += v;
			}
			string += "\n";
		}
		window.document.getElementById("display").innerText = string;
	}
	,setPixel: function(point,value) {
		var x = point.x | 0;
		var y = point.y | 0;
		if(x > 0 && x < this.width && y > 0 && y < this.height) {
			this.pixels[y * this.width + x] = value;
		}
	}
};
var HxOverrides = function() { };
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
var Main = function() { };
Main.main = function() {
	var loop;
	var app = new App();
	loop = function(time) {
		app.update();
		window.requestAnimationFrame(loop);
	};
	window.requestAnimationFrame(loop);
};
var Name = function() { };
Name.createNames = function() {
	var count = 0;
	var consonne = ["z","r","t","p","q","s","d","f","g","h","j","k","l","m","w","x","c","v","b","n"];
	var voyelle = ["a","e","y","u","i","o"];
	var nameStock = [];
	while(count < 3000) {
		var name = consonne[Std.random(consonne.length)].toUpperCase() + voyelle[Std.random(voyelle.length)] + consonne[Std.random(consonne.length)] + voyelle[Std.random(voyelle.length)];
		nameStock.push(name);
		++count;
	}
	return nameStock;
};
var Point = function(x,y) {
	this.x = x;
	this.y = y;
};
var Shield = function(name,defense,block) {
	this.name = name;
	this.defense = defense;
	this.block = block;
};
Shield.createShields = function() {
	var pavois = new Shield("pavois",16,20);
	var targe = new Shield("targe",1,70);
	var rondache = new Shield("rondache",8,50);
	var egide = new Shield("egide",12,35);
	var rampart = new Shield("rampart",20,10);
	return [pavois,targe,rondache,egide,rampart];
};
var Std = function() { };
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var Warrior = function(name,health,strength,initiative,weapon,shield,victory,position) {
	this.name = name;
	this.health = health;
	this.strength = strength;
	this.initiative = initiative;
	this.weapon = weapon;
	this.shield = shield;
	this.maxHealth = health;
	this.victory = victory;
	this.position = position;
};
Warrior.createWarriors = function(display) {
	var count = 0;
	var weaponStock = Weapon.createWeapons();
	var shieldStock = Shield.createShields();
	var nameStock = Name.createNames();
	var warriorStock = [];
	while(count < 10) {
		var myWarrior = new Warrior(nameStock[Std.random(3001)],100,10,Std.random(3000),weaponStock[1],shieldStock[1],0,new Point(Std.random(display.width),Std.random(display.height)));
		warriorStock.push(myWarrior);
		++count;
	}
	return warriorStock;
};
Warrior.prototype = {
	attack: function(opponent) {
		var damage = Std.random(this.strength);
		if(this.weapon != null) {
			var crit = Std.random(100);
			if(crit < this.weapon.critique) {
				damage += this.weapon.damage * 2;
			} else {
				damage += this.weapon.damage;
			}
		}
		if(opponent.shield != null) {
			var blockage = Std.random(100);
			damage -= opponent.shield.defense;
			if(blockage < opponent.shield.block) {
				damage = 0;
			}
		}
		damage = Math.max(0,damage) | 0;
		opponent.health -= damage;
		var vampirisme = damage / 100 * this.weapon.lifeSteal | 0;
		if(this.health < this.maxHealth) {
			this.health += vampirisme;
			if(this.health > this.maxHealth) {
				this.health = this.maxHealth;
			}
		}
	}
};
var Weapon = function(name,damage,critique,lifeSteal) {
	this.name = name;
	this.damage = damage;
	this.critique = critique;
	this.lifeSteal = lifeSteal;
};
Weapon.createWeapons = function() {
	var axe = new Weapon("axe",35,10,25);
	var hammer = new Weapon("hammer",50,5,10);
	var masse = new Weapon("masse",15,40,45);
	var dague = new Weapon("dague",10,95,50);
	var sword = new Weapon("sword",25,15,35);
	return [axe,hammer,sword,masse,dague];
};
Main.main();
})();
